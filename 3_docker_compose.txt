Docker compose:
в docker compose мы можем описать настройки для множества образов, который будут подключаться к контейнеру 
(в Dockerfile можем описать только 1 образ)


Синтаксис:
version: '3'  # Версия синтаксиса Docker Compose

services:
  service1:  # Имя сервиса
    image: image_name:tag  # Docker-образ для сервиса
    restart: always
    ports:
      - "8080:80"  # Проброс портов (локальный:контейнера)
    volumes:
      - /path/on/host:/path/in/container  # Монтирование томов
    environment:
      - KEY=VALUE  # Переменные среды
    depends_on:
      - other_service  # Зависимость от другого сервиса

  service2:
    image: image_name2:tag
    # Дополнительные параметры для сервиса 2

networks:
  my_network:  # Определение пользовательской сети
    driver: bridge  # Драйвер сети


version                 - Указывает на версию синтаксиса Docker Compose. 
                            В примере используется версия '3' (обычно версия 3+)
services                - Определяет сервисы, каждый из которых представляет собой контейнер в многоконтейнерном приложении.
service1, service2      - Имена сервисов (берутся "из головы")
image                   - Docker-образ, который будет использоваться для создания контейнера.
restart                 - Указываем что делать, если образ перестал работать. 
                            В данном случае "always" он всегда будет автоматически перезапускаться 
                            (еще может  быть "no", "unless-stopped" и "on-failure")
ports                   - Определяет проброс портов между хост-системой и контейнером.
volumes                 - Определяет монтирование томов между хост-системой и контейнером.
environment             - Задает переменные среды, которые будут переданы в контейнер.
depends_on              - Указывает, от каких других сервисов зависит текущий сервис. 
                            Docker Compose будет устанавливать порядок запуска контейнеров в соответствии с зависимостями, 
                        заданными с помощью этого параметра.
networks                - Определяет сети, используемые в многоконтейнерном приложении. 
                            В примере создается пользовательская сеть my_network.


docker-compose build    - построить образы из docker-compose файла
docker-compose up       - запуск


Если у нас уже есть файл Dockerfile, то мы можем добавить его в services
php:
  build: ./php
  ports:
    - 8081:80

в build указываем папку, в которой лежит Dockerfile


docker-compose run <command>
тоже запускает все сервисы, но позволяет выполнить дополнительную команду при запуске всех сервисов
Например для создания проекта на django:
docker-compose run <service_name> django-admin startproject <project_name> <project_path>


Volumes:
С помощью томов мы можем соединить папку, которая находится на хост машине с нашей текущей папкой (указываем в сервисе django):
volumes:
    - .:/usr/src/app
соединяем папку проекта с папкой в контейнере


При запущеном контейнере django, можем выполнить нужные нам команды с помощью run
docker-compose run django python manage.py migrate
docker-compose run django python manage.py createsuperuser


Закрываем контейнер
docker-compose down

Сейчас проблема в том, что если мы закроем контейнер, то всё пропадет (миграции, суперюзер итп)
Поэтому в сервисе postgres тоже укажем тома
volumes:
    - pgdbdata:/var/lib/postgresql/data/
